<?php

/**
 * @file
 * Module for adding cache setting to blocks.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Block\BlockPluginInterface;
use Drupal\block\Entity\Block;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function block_cache_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the block_cache module.
    case 'help.page.block_cache':
      $output = '';

      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Block Cache Allows site builders to set cache setting for each block.') . '</p>';

      $output .= '<h3>' . t('Installation note') . '</h3>';
      $output .= '<dl>';
      $output .= '<dt>' . t('Enable the module on <a href=":extend_link">extend menu</a>.', [':extend_link' => \Drupal::url('system.modules_list')]) . '</dt>';
      $output .= '</dl>';

      $output .= '<p>' . t('For more information, please visit the <a href=":project_link">official project page on Drupal.org</a>.', [':project_link' => 'https://www.drupal.org/project/block_cache']) . '</p>';

      return $output;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function block_cache_form_block_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $block = $form_state->getFormObject()->getEntity();

  // This will automatically be saved in the third party settings.
  $form['third_party_settings']['#tree'] = TRUE;
  $form['third_party_settings']['block_cache'] = [
    '#type' => 'details',
    '#title' => t('Block Cache'),
  ];
  $form['third_party_settings']['block_cache']['miliseconds'] = [
    '#type' => 'number',
    '#min' => 0,
    '#title' => t('Timeout'),
    '#description' => t('Miliseconds, example: 3000 for 3 seconds'),
    '#default_value' => $block->getThirdPartySetting('block_cache', 'miliseconds'),
  ];
  $form['third_party_settings']['block_cache']['disable'] = [
    '#type' => 'checkbox',
    '#title' => t('Disable cache'),
    '#default_value' => $block->getThirdPartySetting('block_cache', 'disable', FALSE),
  ];
  $form['third_party_settings']['block_cache']['force_disable'] = [
    '#type' => 'checkbox',
    '#title' => t('Force disable'),
    '#description' => t("<strong>Note:</strong> Above disable cache doesn't bypass for anonymous user caching but this will allows you to. But you'll lose page caching ability on wherever this block exists."),
    '#default_value' => $block->getThirdPartySetting('block_cache', 'force_disable', FALSE),
  ];
}

/**
 * Implements hook_block_build_alter().
 */
function block_cache_block_build_alter(array &$build, BlockPluginInterface $block) {
  $block_machine_name = $block->getMachineNameSuggestion();

  $block_entity = Block::load($block_machine_name);
  if ($block_entity) {
    $force_disable = $block_entity->getThirdPartySetting('block_cache', 'force_disable', FALSE);
    $disable = $block_entity->getThirdPartySetting('block_cache', 'disable', FALSE);
    $miliseconds = $block_entity->getThirdPartySetting('block_cache', 'miliseconds');

    // Cache with timer.
    if ($miliseconds) {
      $build['#cache']['max-age'] = $miliseconds;
    }

    // Disable cache using cache age.
    if ($disable == TRUE) {
      $build['#cache']['max-age'] = 0;
    }

    // This disable page caching wherever this block has been placed.
    if ($force_disable == TRUE) {
      \Drupal::service('page_cache_kill_switch')->trigger();

      // Caching still works unless disabling it's timer.
      $build['#cache']['max-age'] = 0;
    }
  }
}
